const { Telegraf, Markup } = require('telegraf');
const mongoose = require('mongoose');

const bot = new Telegraf("BOT_API");

//mongodb://localhost:27017/Name_DB
mongoose.connect("//mongodb://localhost:27017/Name_DB", {
  useNewUrlParser: true,
  useUnifiedTopology: true,
}).then(() => {
  console.log('Successfully connected to MongoDB');
}).catch((error) => {
  console.error('MongoDB connection error:', error);
  process.exit(1); // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
});

const db = mongoose.connection;
db.on('error', console.error.bind(console, 'MongoDB connection error:'));

const userSchema = new mongoose.Schema({
  userId: Number,
  chatId: Number,
  firstName: String,
  lastName: String,
  teaPoints: { type: Number, default: 0 },
  lastUsed: Date,
});

const User = mongoose.model('User', userSchema);

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
bot.telegram.setMyCommands([
  { command: 'tea', description: '–ü–æ–ª—É—á–∏—Ç—å –æ—á–∫–∏ —á–∞—è' },
  { command: 'beer', description: '–í—ã–ø–∏—Ç—å –ø–∏–≤–æ' },
  { command: 'wine', description: '–í—ã–ø–∏—Ç—å –≤–∏–Ω–æ' },
  { command: 'cognac', description: '–í—ã–ø–∏—Ç—å –∫–æ–Ω—å—è–∫' },
  { command: 'vodka', description: '–í—ã–ø–∏—Ç—å –≤–æ–¥–∫—É' },
  { command: 'chatstats', description: '–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–∞—Ç–∞' },
  { command: 'mystats', description: '–ü–æ–∫–∞–∑–∞—Ç—å –º–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É' }
]);

const DRINKS = {
  tea: '—á–∞—è',
  beer: '–ø–∏–≤–∞',
  wine: '–≤–∏–Ω–∞',
  cognac: '–∫–æ–Ω—å—è–∫–∞',
  vodka: '–≤–æ–¥–∫–∏'
};

async function handleDrinkCommand(ctx, drinkType) {
  if (ctx.chat.type === 'private') {
    return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ —á–∞—Ç, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.', 
    Markup.inlineKeyboard([
      Markup.button.url('–î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ —á–∞—Ç', `https://t.me/${bot.botInfo.username}?startgroup=true`)
    ]));
  }

  const userId = ctx.from.id;
  const chatId = ctx.chat.id;
  const firstName = ctx.from.first_name || '';
  const lastName = ctx.from.last_name || '';

  let user = await User.findOne({ userId, chatId });

  if (!user) {
    user = new User({
      userId,
      chatId,
      firstName,
      lastName,
      teaPoints: 0,
      lastUsed: new Date(0),
    });
  } else {
    user.firstName = firstName;
    user.lastName = lastName;
  }

  const now = new Date();
  const cooldown = 4 * 60 * 60 * 1000; // 4 —á–∞—Å–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö

  if (now - user.lastUsed < cooldown) {
    const remainingTime = new Date(cooldown - (now - user.lastUsed));
    return ctx.reply(
      `–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –∫–æ–º–∞–Ω–¥—É –Ω–µ–¥–∞–≤–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ ${remainingTime.getUTCHours()} —á–∞—Å–æ–≤ –∏ ${remainingTime.getUTCMinutes()} –º–∏–Ω—É—Ç.`
    );
  }

  const points = Math.floor(Math.random() * 10) + 1;
  user.teaPoints += points;
  user.lastUsed = now;
  await user.save();

  ctx.replyWithMarkdown(
    `[${firstName} ${lastName}](tg://user?id=${userId}), –≤—ã–ø–∏–ª–∏ ${points} –ª–∏—Ç—Ä–æ–≤ ${DRINKS[drinkType]}! –í—Å–µ–≥–æ —É –≤–∞—Å —Ç–µ–ø–µ—Ä—å ${user.teaPoints} –ª–∏—Ç—Ä–æ–≤.`
  );
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –Ω–∞–ø–∏—Ç–∫–æ–≤
bot.command('tea', (ctx) => handleDrinkCommand(ctx, 'tea'));
bot.command('beer', (ctx) => handleDrinkCommand(ctx, 'beer'));
bot.command('wine', (ctx) => handleDrinkCommand(ctx, 'wine'));
bot.command('cognac', (ctx) => handleDrinkCommand(ctx, 'cognac'));
bot.command('vodka', (ctx) => handleDrinkCommand(ctx, 'vodka'));

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Å–µ–≥–æ —á–∞—Ç–∞
bot.command('chatstats', async (ctx) => {
  if (ctx.chat.type === 'private') {
    return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ —á–∞—Ç, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.', 
    Markup.inlineKeyboard([
      Markup.button.url('–î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ —á–∞—Ç', `https://t.me/${bot.botInfo.username}?startgroup=true`)
    ]));
  }

  const chatId = ctx.chat.id;
  const users = await User.find({ chatId }).sort({ teaPoints: -1 }).limit(15);

  if (users.length === 0) {
    return ctx.reply('–í —ç—Ç–æ–º —á–∞—Ç–µ –µ—â–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö.');
  }

  let stats = 'üçµ –¢–æ–ø-15 –∏–≥—Ä–æ–∫–æ–≤ —á–∞—Ç–∞:\n\n';
  users.forEach((user, index) => {
    stats += `[${++index}. ${user.firstName} ${user.lastName}] - ${user.teaPoints} –ª\n`;
  });
  stats += "\n\n–ß—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –≤ —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫, –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /tea\n\n–¢–û–ü –ª—É—á—à–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ - /top"
  ctx.replyWithMarkdown(stats);
});

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.command('mystats', async (ctx) => {
  if (ctx.chat.type === 'private') {
    return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ —á–∞—Ç, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.', 
    Markup.inlineKeyboard([
      Markup.button.url('–î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ —á–∞—Ç', `https://t.me/${bot.botInfo.username}?startgroup=true`)
    ]));
  }

  const userId = ctx.from.id;
  const chatId = ctx.chat.id;

  const user = await User.findOne({ userId, chatId });

  if (!user) {
    return ctx.reply('–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –æ—á–∫–æ–≤.');
  }

  ctx.replyWithMarkdown(`üçµ–ü—Ä–æ—Ñ–∏–ª—å \n üë§[${user.firstName} ${user.lastName}](tg://user?id=${user.userId})\nü§Ø –í—Å–µ–≥–æ: ${user.teaPoints} –ª–∏—Ç—Ä–æ–≤.\n`);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ inline –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫
bot.on('inline_query', async (ctx) => {
  const query = ctx.inlineQuery.query.toLowerCase();

  const results = [
    { id: '1', type: 'article', title: '/tea', input_message_content: { message_text: '/tea' }, description: '–ü–æ–ª—É—á–∏—Ç—å –æ—á–∫–∏ —á–∞—è' },
    { id: '2', type: 'article', title: '/beer', input_message_content: { message_text: '/beer' }, description: '–í—ã–ø–∏—Ç—å –ø–∏–≤–æ' },
    { id: '3', type: 'article', title: '/wine', input_message_content: { message_text: '/wine' }, description: '–í—ã–ø–∏—Ç—å –≤–∏–Ω–æ' },
    { id: '4', type: 'article', title: '/cognac', input_message_content: { message_text: '/cognac' }, description: '–í—ã–ø–∏—Ç—å –∫–æ–Ω—å—è–∫' },
    { id: '5', type: 'article', title: '/vodka', input_message_content: { message_text: '/vodka' }, description: '–í—ã–ø–∏—Ç—å –≤–æ–¥–∫—É' },
    { id: '6', type: 'article', title: '/chatstats', input_message_content: { message_text: '/chatstats' }, description: '–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–∞—Ç–∞' },
    { id: '7', type: 'article', title: '/mystats', input_message_content: { message_text: '/mystats' }, description: '–ü–æ–∫–∞–∑–∞—Ç—å –º–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É' }
  ].filter(command => command.title.includes(query));

  ctx.answerInlineQuery(results);
});

bot.launch();
console.log('Bot is running...');